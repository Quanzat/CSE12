
/**
 * Name: Quan Tran
 * ID: A16191839
 * Email: qutran@ucsd.edu
 * Sources used: Lecture
 * 
 * This file contain a class that implement information about a student by using
 * methods written in the class. 
 */

import java.util.Objects;

/**
 * This class have many methods to get student information and also compare such
 * information. It contains methods that is use to obtain information from the
 * student such as Fisrt and Last name, and also PID. Moreover, it contain a
 * method to check if the student exist; check where the student is located
 * lexicographically; and generate a hash code for student object.
 */
public class Student implements Comparable<Student> {
    private final String firstName;
    private final String lastName;
    private final String PID;

    /**
     * This is a constructor to initialize student information
     * 
     * @param firstName - student first name
     * @param lastName - student last name
     * @param PID - student PID
     * @throws IllegalArgumentException -- if any input is null
     */
    public Student(String firstName, String lastName, String PID) {
        // Check if any input is null
        if (firstName == null || lastName == null || PID == null) {
            throw new IllegalArgumentException();
        }
        // Initialize Student's information
        this.firstName = firstName;
        this.lastName = lastName;
        this.PID = PID;
    }

    /**
     * This method return the student last name
     * 
     * @return - the student last name
     */
    public String getLastName() {
        return this.lastName;
    }

    /**
     * This method return the student first name
     * 
     * @return - the student first name
     */
    public String getFirstName() {
        return this.firstName;
    }

    /**
     * This method return the student PID
     * 
     * @return - the student PID
     */
    public String getPID() {
        return this.PID;
    }

    /**
     * This method return true if o is also a non-null Student and all the
     * instance variables of o equal the instance variable of the current
     * Student object. Otherwise, return false.
     * 
     * @param o - the object to compare
     * @return - true or false based on the condition
     */
    @Override
    public boolean equals(Object o) {
        // Check if object is null and if object is not the same as student
        // object.
        if (o == null && !(o instanceof Student)) {
            // If so, return false.
            return false;
        }
        // Otherwise,
        else {
            // Casting o to Student object
            Student s = (Student) o;

            // Comparing first name, last name, and PID between the two student
            // object.
            if (s.getFirstName().equals(this.getFirstName())
                    && s.getLastName().equals(this.getLastName())
                    && s.getPID().equals(this.getPID())) {

                // If match, then return true.
                return true;
            }
        }
        // Otherwise, return false.
        return false;
    }

    /**
     * This method return the hash value generated by Object’s hash function.
     * 
     * @return - a hash value in the order of the student’s firstName, lastName,
     * and PID.
     */
    @Override
    public int hashCode() {
        return Objects.hash(firstName, lastName, PID);
    }

    /**
     * This method compare the two object and return its value lexicographically
     * 
     * @param o - the object to compare
     * @return - 0, if the two object is the same; negative value if object is
     * before; positive value if object is after.
     */
    @Override
    public int compareTo(Student o) {
        // Comparing last name and returning the order of it lexicographically
        int lastNameOrder = this.lastName.compareTo(o.lastName);
        if (lastNameOrder != 0) {
            return lastNameOrder;
        }
        // Comparing first name and returning the order of it lexicographically
        int firstNameOrder = this.firstName.compareTo(o.firstName);
        if (firstNameOrder != 0) {
            return firstNameOrder;
        }
        // Comparing PID and returning the order of it lexicographically
        int PIDOrder = this.PID.compareTo(o.PID);
        if (PIDOrder != 0) {
            return PIDOrder;
        }
        // Return 0 always if everything is anything is matched
        return 0;
    }
}
